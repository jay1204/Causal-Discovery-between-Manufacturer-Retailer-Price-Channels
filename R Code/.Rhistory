install.packages("vars")
install.packages("urca")
library(vars)
library(urca)
install.packages("urca")
install.packages("urca")
library(vars)
library(urca)
library(vars)
library(urca)
library(urca)
library(vars)
library(urca)
data = read.csv(file="./Input Data/data.csv",head=TRUE,sep=",")
data = read.csv(file="./Input Data/data.csv",head=TRUE,sep=",")
?read.csv
data = read.csv(file="././Input Data/data.csv",head=TRUE,sep=",")
# Read the input data
data = read.csv(file="../Input Data/data.csv",head=TRUE,sep=",")
data
?vars
?VAR
# Build a VAR model
var <- VAR(data, type="const")
?residuals
# Extract the residuals from the VAR model
var_residuals <- resid(var)
var_residuals
?adf.test
?adf.test()
?adf.test
ur.df
?ur.df
ur.df(var_residuals,type="none",lags=0)
ur.df(var_residuals[:,1],type="none",lags=0)
ur.df(var_residuals[,1],type="none",lags=0)
var
# Check for stationarity using the Augmented Dickey-Fuller test
ur.df(var_residuals[,1],type="none",lags=0)
ur.df(var_residuals[,2],type="none",lags=0)
ur.df(var_residuals[,3],type="none",lags=0)
# Load the libraries
#install.packages("vars")
#install.packages("urca")
library(vars)
library(urca)
# Read the input data
data = read.csv(file="../Input Data/data.csv",head=TRUE,sep=",")
# Build a VAR model
var <- VAR(data, type="const")
# Extract the residuals from the VAR model
var_residuals <- resid(var)
# Check for stationarity using the Augmented Dickey-Fuller test
ur.df(var_residuals[,1],type="none",lags=0)
ur.df(var_residuals[,2],type="none",lags=0)
ur.df(var_residuals[,3],type="none",lags=0)
# The interpretation of the ur.df test value can be done using critical value 0.05
qnorm(0.05/2)
?ks.test
ks.test(var_residuals[,1],"pnorm")
ks.test(var_residuals[,2],"pnorm")
ks.test(var_residuals[,3],"pnorm")
ks.test(var_residuals[,1],"pnorm")
ks.test(var_residuals[,2],"pnorm")
ks.test(data[,1],"pnorm")
shapiro.test(data[,1])
ks.test(data[,1],"pnorm")
ks.test(data[,2],"pnorm")
ks.test(data[,3],"pnorm")
?rnorm
a <- rnorm(n, mean = 10, sd = 1)
a <- rnorm(100, mean = 10, sd = 1)
ks.test(a,"pnorm")
ks.test
?ks.test
?sd
ks.test(data[,1],"pnorm",mean=mean(data[,1],sd=sd(data[,1]))
ks.test(data[,1],"pnorm",mean=mean(data[,1]),sd=sd(data[,1]))
?ks.test
ks.test(data[,1],"pnorm",mean(data[,1]),sd(data[,1]))
ks.test(data[,1],"pnorm",mean=mean(data[,1]),sd = sd(data[,1]))
ks.test(a,"pnorm",10,1)
# Check whether the variables follow a Gaussian distribution
ks.test(data[,1],"pnorm",mean=mean(data[,1]),sd = sd(data[,1]))
ks.test(data[,2],"pnorm",mean=mean(data[,2]),sd = sd(data[,2]))
ks.test(data[,3],"pnorm",mean=mean(data[,3]),sd = sd(data[,3]))
library(pcalg)
install.packages("pcalg")
var
var[,1]
var
# PC algorithm
suffStat=list(C=cor(data), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
library(pcalg)
# Check whether the variables follow a Gaussian distribution
ks.test(data[,1],"pnorm",mean=mean(var_residuals[,1]),sd = sd(var_residuals[,1]))
ks.test(data[,2],"pnorm",mean=mean(var_residuals[,2]),sd = sd(var_residuals[,2]))
ks.test(data[,3],"pnorm",mean=mean(var_residuals[,3]),sd = sd(var_residuals[,3]))
# Check whether the variables follow a Gaussian distribution
ks.test(var_residuals[,1],"pnorm",mean=mean(var_residuals[,1]),sd = sd(var_residuals[,1]))
ks.test(var_residuals[,2],"pnorm",mean=mean(var_residuals[,2]),sd = sd(var_residuals[,2]))
ks.test(var_residuals[,3],"pnorm",mean=mean(var_residuals[,3]),sd = sd(var_residuals[,3]))
library(pcalg)
install.packages("pcalg")
source("https://bioconductor.org/biocLite.R")
biocLite("RBGL")
install.packages("pcalg")
library(pcalg)
source("http://bioconductor.org/biocLite.R")
biocLite("RBGL")
install.packages("pcalg")
library(pcalg)
install.packages("gmp")
install.packages("gmp")
library(pcalg)
install.packages("pcalg")
library(pcalg)
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
source("https://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# LiNGAM algorithm
lingam_fit <- LINGAM(var_residuals)
show(lingam_fit)
# Load the libraries
#install.packages("vars")
#install.packages("urca")
#install.packages("pcalg")
library(vars)
library(urca)
library(pcalg)
# Read the input data
data = read.csv(file="../Input Data/data.csv",head=TRUE,sep=",")
# Build a VAR model
var <- VAR(data, type="const")
# Extract the residuals from the VAR model
var_residuals <- resid(var)
# Check for stationarity using the Augmented Dickey-Fuller test
ur.df(var_residuals[,1],type="none",lags=0)
ur.df(var_residuals[,2],type="none",lags=0)
ur.df(var_residuals[,3],type="none",lags=0)
# The interpretation of the ur.df test value can be done using critical value 0.05 which is qnorm(0.05/2) = -1.960
# Since the values obtains from the test do not exceed -1.960, the residuals are stationary
# Check whether the variables follow a Gaussian distribution
ks.test(var_residuals[,1],"pnorm",mean=mean(var_residuals[,1]),sd = sd(var_residuals[,1]))
ks.test(var_residuals[,2],"pnorm",mean=mean(var_residuals[,2]),sd = sd(var_residuals[,2]))
ks.test(var_residuals[,3],"pnorm",mean=mean(var_residuals[,3]),sd = sd(var_residuals[,3]))
# from the p-value, they are not normal distributions
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.1, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# LiNGAM algorithm
lingam_fit <- LINGAM(var_residuals)
show(lingam_fit)
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(var_residuals, file = "residuals.csv")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.1, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.1, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.1, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.1, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(data), skel.method="original")
plot(pc_fit, main="PC Output")
# LiNGAM algorithm
lingam_fit <- LINGAM(var_residuals)
show(lingam_fit)
?pc
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(var_residuals), skel.method="original")
plot(pc_fit, main="PC Output")
?pc
plot(gmG8$g, main = "True DAG")
#install.packages("pcalg")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.05, labels=colnames(var_residuals), skel.method="original")
plot(pc_fit, main="PC Output")
# PC algorithm
suffStat=list(C=cor(var_residuals), n=1000)
pc_fit <- pc(suffStat, indepTest=gaussCItest, alpha=0.1, labels=colnames(var_residuals), skel.method="original")
plot(pc_fit, main="PC Output")
# LiNGAM algorithm
lingam_fit <- LINGAM(var_residuals)
show(lingam_fit)
names(data)
